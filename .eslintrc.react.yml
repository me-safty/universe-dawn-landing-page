---
plugins:
  - react
  - react-hooks
settings:
  react:
    pragma: React
    version: "17.0.1"
parserOptions:
  ecmaFeatures:
    jsx: true
globals:
  React: true
rules:
  import/no-absolute-path: 2
  no-restricted-imports:
    - 2
    - paths:
        - providers
        - src
        - admin-portal
        - components
        - degenia
        - hocs
        - index
        - hooks
        - services
        - styles
        - tools
        - typings
        - universe-dawn
        - util
      patterns:
        - group:
            - "@teamparallax/microservice*"
          message: "No Microservice imports"
        - group:
            - "@teamparallax/*/src/*"
          message: "No TypeScript imports"
        - group:
            - "^/src/index"
            - "^src/index"
            - "^/index"
            - "^index"
          message: "No absolute imports"
        - group:
            - "**/../dist"
            - "**/../lib$"
            - "**/../build$"
          message: "No dist/lib/build imports - rather import from @teamparallax/the-package-you-want-to-import-from"
        - group:
            - "@teamparallax/react-components/dist/*"
            - "@teamparallax/react-components/dist"
            - "@teamparallax/degenia-components/dist"
            - "@teamparallax/degenia-components/dist/*"
            - "@teamparallax/ud-components/dist/*"
            - "@teamparallax/ud-components/dist"
          message: "No Path imports. You should export this component in the package's src/index.ts"
        - group:
            - "**/../dist"
            - "**/../lib"
            - "**/../build"
          message: "No relative dist imports - rather import from @teamparallax/the-package-you-want-to-import-from"
        - group:
            - "**/src"
          message: "No source import - rather import from @teamparallax/the-package-you-want-to-import-from"
        - group:
            - providers/*
            - src/*
            - admin-portal/*
            - components/*
            - degenia/*
            - hocs/*
            - hooks/*
            - services/*
            - styles/*
            - tools/*
            - typings/*
            - universe-dawn/*
            - util/*
          message: "No absolute imports"
  import-alias/import-alias:
    - 0
  import/no-default-export: 0
  react-hooks/rules-of-hooks: 2
  react-hooks/exhaustive-deps: 2
  react/boolean-prop-naming: 2
  react/button-has-type: 2
  react/no-array-index-key: 1
  react/no-children-prop: 2
  react/no-deprecated: 2
  react/no-did-mount-set-state: 2
  react/no-did-update-set-state: 2
  react/no-direct-mutation-state: 2
  react/no-find-dom-node: 2
  react/no-is-mounted: 2
  react/no-redundant-should-component-update: 2
  react/no-render-return-value: 2
  react/no-typos: 2
  react/no-string-refs: 2
  react/no-this-in-sfc: 2
  react/no-unknown-property: 2
  react/no-unsafe: 2
  react/no-unused-state: 2
  react/no-will-update-set-state: 2
  react/prefer-es6-class:
    - 2
    - always
  react/prefer-stateless-function: 2
  react/require-render-return: 2
  react/self-closing-comp: 2
  react/void-dom-elements-no-children: 2
  react/jsx-boolean-value: 2
  react/jsx-closing-bracket-location: 2
  react/jsx-closing-tag-location: 2
  react/jsx-curly-brace-presence:
    - 2
    - never
  react/jsx-curly-spacing:
    - 2
    - when: always
  react/jsx-equals-spacing: 2
  react/jsx-first-prop-new-line: 2
  react/jsx-fragments: 2
  react/jsx-indent:
    - 1
    - tab
    - checkAttributes: true
  react/jsx-indent-props:
    - 2
    - tab
  react/jsx-key: 2
  react/jsx-no-comment-textnodes: 2
  react/jsx-no-duplicate-props: 2
  react/jsx-no-target-blank: 2
  react/jsx-pascal-case:
    - 2
    - allowAllCaps: true
  react/jsx-props-no-multi-spaces: 2
  react/jsx-sort-props:
    - 2
    - ignoreCase: true
  react/jsx-tag-spacing:
    - 2
    - afterOpening: never
      beforeSelfClosing: never
      beforeClosing: never
      closingSlash: never
  react/jsx-uses-vars: 2
  react/jsx-wrap-multilines:
    - 2
    - arrow: parens-new-line
      assignment: parens-new-line
      condition: parens-new-line
      declaration: parens-new-line
      logical: parens-new-line
      return: parens-new-line
      prop: parens-new-line
  "@typescript-eslint/naming-convention":
    - 2
    - selector: default
      format:
        - strictCamelCase
      custom:
        regex: "^id[A-Z]"
        match: false
    - selector: parameter
      types:
        - boolean
      format:
        - StrictPascalCase
      prefix:
        - is
        - should
        - are
        - does
        - has
        - can
        - did
        - will
        - enable
        - disable
        - needs
        - requires
    - selector: variable
      types:
        - boolean
      format:
        - StrictPascalCase
      prefix:
        - is
        - should
        - are
        - does
        - has
        - can
        - did
        - will
        - enable
        - disable
        - needs
        - requires
    - selector: property
      types:
        - boolean
      format:
        - StrictPascalCase
      leadingUnderscore: allow
      prefix:
        - is
        - should
        - are
        - does
        - has
        - can
        - did
        - will
        - enable
        - disable
        - needs
        - requires
    - selector: parameterProperty
      types:
        - boolean
      format:
        - StrictPascalCase
      prefix:
        - is
        - should
        - are
        - does
        - has
        - can
        - did
        - will
        - enable
        - disable
        - needs
        - requires
    - selector: variable
      modifiers:
        - const
      format:
        - PascalCase
      filter:
        regex: "^[A-Z]"
        match: true
    - selector: class
      format:
        - StrictPascalCase
    - selector: memberLike
      modifiers:
        - private
      format:
        - strictCamelCase
      leadingUnderscore: allow
    - selector: memberLike
      format:
        - strictCamelCase
      leadingUnderscore: allow
    - selector: typeAlias
      format:
        - StrictPascalCase
      prefix:
        - T
      custom:
        regex: "^Id[A-Z]"
        match: false
    - selector: typeParameter
      format:
        - StrictPascalCase
    - selector: interface
      format:
        - StrictPascalCase
      prefix:
        - I
    - selector: enum
      format:
        - StrictPascalCase
      prefix:
        - E
